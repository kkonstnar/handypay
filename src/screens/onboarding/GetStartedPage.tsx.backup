import React, { useState, useEffect } from 'react';
import { View, Text, StyleSheet, Alert, ActivityIndicator, Linking, TouchableOpacity } from 'react-native';
import { AppState } from 'react-native';
import { Ionicons } from '@expo/vector-icons';
import ArrowSvg from '../../../assets/arrow.svg';
import UserScanSvg from '../../../assets/user-scan.svg';
import BankSvg from '../../../assets/bank.svg';
import StripeSvg from '../../../assets/stripe.svg';
import Button from '../../components/ui/Button';
import { NativeStackScreenProps } from '@react-navigation/native-stack';
import { RootStackParamList } from '../../navigation/RootNavigator';
import { useSafeAreaInsets } from 'react-native-safe-area-context';
import { useUser, UserData } from '../../contexts/UserContext';
import { SupabaseUserService } from '../../services/SupabaseService';
import { stripeOnboardingManager } from '../../services/StripeOnboardingService';
import Toast from 'react-native-toast-message';

export type GetStartedPageProps = NativeStackScreenProps<RootStackParamList, 'GetStartedPage'>;

// New modular hooks and components
import { useStripeOnboarding } from '../../hooks/useStripeOnboarding';
import { useStripeDeepLinks } from '../../hooks/useStripeDeepLinks';
import StripeOnboardingContent from '../../components/stripe/StripeOnboardingContent';
import StripeOnboardingButtons from '../../components/stripe/StripeOnboardingButtons';
import { stripeOnboardingManager } from '../../services/StripeOnboardingService';

export default function GetStartedPage({ navigation }: GetStartedPageProps): React.ReactElement {
  const insets = useSafeAreaInsets();
  const { user } = useUser();

  // Use our modular hooks
  const {
    currentStripeAccountId,
    isOnboardingInProgress,
    identityVerificationCompleted,
    bankAccountLinked,
    isReturningFromStripe,
    loading,
    startOnboardingStatusCheck,
    startPersistentPolling,
    cancelOnboarding,
    setLoading,
    setCurrentStripeAccountId,
  } = useStripeOnboarding(user, navigation);

  // Handle Stripe deep links
  useStripeDeepLinks({
    user,
    startPersistentPolling,
    checkOnboardingStatus: () => {}, // We'll implement this if needed
    navigation,
  });

  // Check user's current onboarding status on component mount
  useEffect(() => {
    const checkUserOnboardingStatus = async () => {
      if (!user?.id) return;

      try {
        console.log('üîç Checking user onboarding status...');
        const backendResponse = await fetch(`https://handypay-backend.onrender.com/api/stripe/user-account/${user.id}`);

        if (backendResponse.ok) {
          const backendData = await backendResponse.json();

          // Check if user has a Stripe account
          if (backendData.stripe_account_id || backendData.stripeAccountId) {
            const accountId = backendData.stripe_account_id || backendData.stripeAccountId;

            // Check Stripe account status
            const statusResponse = await fetch(
              `https://handypay-backend.onrender.com/api/stripe/account-status`,
              {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ stripeAccountId: accountId }),
              }
            );

            if (statusResponse.ok) {
              const statusData = await statusResponse.json();

              // Update completion status based on Stripe account status
              const chargesEnabled = statusData.accountStatus?.charges_enabled;
              const detailsSubmitted = statusData.accountStatus?.details_submitted;

              setIdentityVerificationCompleted(detailsSubmitted || chargesEnabled);
              setBankAccountLinked(chargesEnabled);

              // Mark as returning from Stripe if onboarding is complete but backend hasn't updated
              if (chargesEnabled && !backendData.stripe_onboarding_completed) {
                setIsReturningFromStripe(true);
              }



              console.log('‚úÖ Onboarding status updated:', {
                identityVerificationCompleted: detailsSubmitted || chargesEnabled,
                bankAccountLinked: chargesEnabled,
                isReturningFromStripe: chargesEnabled && !backendData.stripe_onboarding_completed
              });
            }
          }
        }
      } catch (error) {
        console.error('‚ùå Error checking user onboarding status:', error);
      }
    };

    checkUserOnboardingStatus();
  }, [user?.id]);

  // Manual test function to trigger webhook logic
  const testWebhookUpdate = async () => {
    try {
      console.log('üß™ Testing webhook update manually...');

      // If we don't have the account ID in state, fetch it from backend first
      let accountId = currentStripeAccountId;
      if (!accountId && user?.id) {
        console.log('üîç Fetching account ID from backend...');
        const backendResponse = await fetch(`https://handypay-backend.onrender.com/api/stripe/user-account/${user.id}`);
        if (backendResponse.ok) {
          const backendData = await backendResponse.json();
          accountId = backendData.stripe_account_id || backendData.stripeAccountId;
          console.log('üìã Retrieved account ID:', accountId);
        }
      }

      console.log('üìä Using accountId:', accountId, 'userId:', user?.id);

      const response = await fetch('https://handypay-backend.onrender.com/api/stripe/test-account-update', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          accountId: accountId,
          userId: user?.id
        })
      });

      console.log('üì° Response status:', response.status);

      if (response.status === 404) {
        Toast.show({
          type: 'error',
          text1: 'Backend not updated yet',
          text2: 'Test endpoint not found - redeploy backend',
        });
        return;
      }

      const result = await response.json();
      console.log('üß™ Test webhook result:', result);

      if (result.success) {
        Toast.show({
          type: 'success',
          text1: 'Setup Completed!',
          text2: 'Welcome to HandyPay!',
        });

        // Force refresh user context and navigate
        setTimeout(async () => {
          try {
            // Refresh user data from backend
            console.log('üîÑ Refreshing user context...');
            const refreshedUser = await SupabaseUserService.getUser(user?.id || '');
            console.log('‚úÖ User context refreshed:', refreshedUser?.stripe_onboarding_completed);

            // Navigate to success page
            navigation.replace('SuccessPage');
          } catch (error) {
            console.error('‚ùå Error refreshing user context:', error);
            // Still navigate even if refresh fails
            navigation.replace('SuccessPage');
          }
        }, 500);
      } else {
        Toast.show({
          type: 'error',
          text1: 'Webhook test failed',
          text2: result.error,
        });
      }
    } catch (error) {
      console.error('‚ùå Error testing webhook:', error);
      Toast.show({
        type: 'error',
        text1: 'Test failed',
        text2: error instanceof Error ? error.message : 'Unknown error occurred',
      });
    }
  };

  // Function to start polling for onboarding status
  const startOnboardingStatusCheck = () => {
    console.log('üîÑ Starting onboarding status polling...');

    // Check immediately
    checkOnboardingStatus();

    // Then check every 5 seconds
    const interval = setInterval(() => {
      checkOnboardingStatus();
    }, 5000);

    setOnboardingStatusCheckInterval(interval);
  };

  // Function to stop polling for onboarding status
  const stopOnboardingStatusCheck = () => {
    console.log('üõë Stopping onboarding status polling...');

    if (onboardingStatusCheckInterval) {
      clearInterval(onboardingStatusCheckInterval);
      setOnboardingStatusCheckInterval(null);
    }
  };

  // Function to cancel onboarding process
  const cancelOnboarding = () => {
    console.log('üóëÔ∏è Cancelling onboarding process...');
    stopOnboardingStatusCheck();
    stopPersistentPolling();
    setIsOnboardingInProgress(false);

    Toast.show({
      type: 'info',
      text1: 'Onboarding cancelled',
      text2: 'You can restart the process anytime.',
    });
  };

  // Function to check current onboarding status
  const checkOnboardingStatus = async () => {
    if (!user) return;

    try {
      console.log('üîç Checking onboarding status...');

      const userAccountResponse = await fetch(
        `https://handypay-backend.onrender.com/api/stripe/user-account/${user.id}`
      );

      if (userAccountResponse.ok) {
        const userData = await userAccountResponse.json();
        console.log('üìä User data from backend:', userData);

        // Check if user has completed onboarding in backend (webhook might have updated it)
        if (userData.stripe_onboarding_completed) {
          console.log('‚úÖ Onboarding completed in backend (via webhook), navigating to SuccessPage');
          stopOnboardingStatusCheck();
          setIsOnboardingInProgress(false);
          navigation.replace('SuccessPage');
          return;
        }

        // UPDATE STATE: Set the current account ID from backend data
        if (userData.stripe_account_id || userData.stripeAccountId) {
          const accountId = userData.stripe_account_id || userData.stripeAccountId;
          if (accountId !== currentStripeAccountId) {
            console.log('üìã Setting current account ID from backend:', accountId);
            setCurrentStripeAccountId(accountId);
          }
        }

        if (userData.stripe_account_id || userData.stripeAccountId) {
          const accountId = userData.stripe_account_id || userData.stripeAccountId;

          const statusResponse = await fetch(
            `https://handypay-backend.onrender.com/api/stripe/account-status`,
            {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({ stripeAccountId: accountId }),
            }
          );

          if (statusResponse.ok) {
            const statusData = await statusResponse.json();

            const chargesEnabled = statusData.accountStatus?.charges_enabled;
            const onboardingCompleted = userData.stripe_onboarding_completed;

            console.log('üìä Status check result:', {
              chargesEnabled,
              onboardingCompleted,
              isOnboardingInProgress,
              detailsSubmitted: statusData.accountStatus?.details_submitted
            });

            // If onboarding is now complete, navigate to success page
            if ((chargesEnabled || onboardingCompleted) && isOnboardingInProgress) {
              console.log('‚úÖ Onboarding completed during polling, navigating to SuccessPage');
              stopOnboardingStatusCheck();
              setIsOnboardingInProgress(false);
              navigation.replace('SuccessPage');
              return;
            }
          }
        }
      }
    } catch (error) {
      console.error('Error checking onboarding status:', error);
    }
  };

  // Cleanup polling on component unmount
  useEffect(() => {
    return () => {
      stopOnboardingStatusCheck();
      stopPersistentPolling();
    };
  }, []);

  // Force check onboarding status when app becomes active
  useEffect(() => {
    const subscription = AppState.addEventListener('change', (nextAppState) => {
      if (nextAppState === 'active') {
        console.log('üì± App became active, checking onboarding status...');
        // Small delay to let things settle
        setTimeout(() => {
          checkOnboardingStatus();
        }, 1000);
      }
    });

    return () => subscription?.remove();
  }, []);

  useEffect(() => {
    // Handle app state changes (when app comes back from background)
    const handleAppStateChange = (nextAppState: string) => {
      console.log('üì± App state changed:', nextAppState);
      if (nextAppState === 'active') {
        console.log('üì± App became active, checking onboarding status...');
        checkOnboardingStatus();
      }
    };

    const subscription = AppState.addEventListener('change', handleAppStateChange);

    return () => subscription?.remove();
  }, [user?.id]);

    // Persistent polling state for long-running Stripe onboarding
  const [persistentPollingInterval, setPersistentPollingInterval] = useState<NodeJS.Timeout | null>(null);
  const [isWaitingForStripeCompletion, setIsWaitingForStripeCompletion] = useState(false);

  // Function to start persistent polling for Stripe completion
  const startPersistentPolling = () => {
    console.log('üîÑ Starting persistent polling for Stripe completion (10+ minutes)...');
    setIsWaitingForStripeCompletion(true);

    const interval = setInterval(async () => {
      if (!user) return;

      try {
        console.log('üîÑ Persistent polling: Checking onboarding status...');
        const userAccountResponse = await fetch(
          `https://handypay-backend.onrender.com/api/stripe/user-account/${user.id}`
        );

        if (userAccountResponse.ok) {
          const userData = await userAccountResponse.json();

          if (userData.stripe_onboarding_completed) {
            console.log('‚úÖ Persistent polling: Onboarding completed in backend!');
            stopPersistentPolling();
            navigation.replace('SuccessPage');
            return;
          }

          // Check if we have an account ID and if it's enabled
          if (userData.stripe_account_id || userData.stripeAccountId) {
            const accountId = userData.stripe_account_id || userData.stripeAccountId;

            const statusResponse = await fetch(
              `https://handypay-backend.onrender.com/api/stripe/account-status`,
              {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ stripeAccountId: accountId }),
              }
            );

            if (statusResponse.ok) {
              const statusData = await statusResponse.json();
              if (statusData.accountStatus?.charges_enabled) {
                console.log('‚úÖ Persistent polling: Stripe account is now enabled!');
                stopPersistentPolling();

                // Update backend and navigate
                await captureStripeAccountData(accountId, 0, 3);
                return;
              }
            }
          }
        }
      } catch (error) {
        console.error('‚ùå Persistent polling error:', error);
      }
    }, 10000); // Check every 10 seconds

    setPersistentPollingInterval(interval);

    // Auto-stop after 15 minutes (900 seconds)
    setTimeout(() => {
      console.log('üõë Auto-stopping persistent polling after 15 minutes');
      stopPersistentPolling();
    }, 900000);
  };

  // Function to stop persistent polling
  const stopPersistentPolling = () => {
    console.log('üõë Stopping persistent polling...');
    setIsWaitingForStripeCompletion(false);

    if (persistentPollingInterval) {
      clearInterval(persistentPollingInterval);
      setPersistentPollingInterval(null);
    }
  };

  useEffect(() => {
    // Handle deep links from Stripe onboarding
    const handleDeepLink = (event: { url: string }) => {
      console.log('üîó DEEP LINK RECEIVED:', event.url);
      console.log('üîó Full event:', JSON.stringify(event, null, 2));

      // Check if this is a Stripe onboarding callback
      const isStripeCallback = event.url.includes('stripe') ||
                              event.url.includes('onboarding') ||
                              event.url.startsWith('handypay://stripe/') ||
                              event.url.includes('connect.stripe.com') ||
                              event.url.includes('account.onboarding');

      if (isStripeCallback) {
        console.log('üéØ Stripe onboarding callback detected:', event.url);

        // Determine the type of callback
        const isSuccess = event.url.includes('/success') ||
                         event.url.includes('onboarding') ||
                         event.url.includes('account.onboarding') ||
                         !event.url.includes('/refresh');
        const isRefresh = event.url.includes('/refresh') || event.url.includes('refresh=true');

        if (isSuccess) {
          console.log('üéâ Stripe onboarding initiated/completed, starting persistent monitoring...');

          // Show immediate feedback
              Toast.show({
                type: 'success',
            text1: 'Processing Stripe setup...',
            text2: 'This may take a few minutes.',
              });

          // Start persistent polling for completion
          startPersistentPolling();

          // Also do an immediate check
            setTimeout(() => {
            checkOnboardingStatus();
            }, 1000);

        } else if (isRefresh) {
          console.log('üîÑ User exited Stripe onboarding');
              Toast.show({
            type: 'info',
            text1: 'Onboarding cancelled',
            text2: 'You can try again anytime.',
          });
        }
      }
    };

    // Add event listener for deep links
    const subscription = Linking.addEventListener('url', handleDeepLink);

    // Check for initial URL (in case app was opened from a deep link)
    Linking.getInitialURL().then((url) => {
      if (url) {
        console.log('üöÄ App opened with initial URL:', url);
        handleDeepLink({ url });
      }
    });

    return () => {
      subscription?.remove();
    };
  }, [navigation, user]);

  // Enhanced app state listener for when app comes back from Stripe
  useEffect(() => {
    const handleAppStateChange = (nextAppState: string) => {
      console.log('üì± App state changed to:', nextAppState);

      if (nextAppState === 'active' && isWaitingForStripeCompletion) {
        console.log('üì± App became active while waiting for Stripe - checking status...');
        checkOnboardingStatus();
      }
    };

    const subscription = AppState.addEventListener('change', handleAppStateChange);

    return () => subscription?.remove();
  }, [isWaitingForStripeCompletion]);



  // Check user's current onboarding status on component mount
  useEffect(() => {
    const checkOnboardingStatus = async () => {
      console.log('üîç Starting onboarding status check...');
      if (!user) {
        console.log('‚ùå No user available for onboarding check');
        return;
      }

      console.log('üîç Checking existing onboarding status for user:', user.id);

      try {
        // Check if user has already completed onboarding
        const userAccountResponse = await fetch(
          `https://handypay-backend.onrender.com/api/stripe/user-account/${user.id}`
        );

        if (userAccountResponse.ok) {
          const userData = await userAccountResponse.json();
          console.log('üìä User data from backend:', userData);

          // If user has a Stripe account ID, check its status
          if (userData.stripe_account_id || userData.stripeAccountId) {
            const accountId = userData.stripe_account_id || userData.stripeAccountId;

            console.log('üìã Found existing Stripe account:', accountId);

            // Get account status from Stripe
            const statusResponse = await fetch(
              `https://handypay-backend.onrender.com/api/stripe/account-status`,
              {
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json',
                },
                body: JSON.stringify({ stripeAccountId: accountId }),
              }
            );

            if (statusResponse.ok) {
              const statusData = await statusResponse.json();

              console.log('üìä Account status:', {
                details_submitted: statusData.accountStatus?.details_submitted,
                charges_enabled: statusData.accountStatus?.charges_enabled,
                onboarding_completed: userData.stripe_onboarding_completed,
                backend_onboarding_completed: userData.stripe_onboarding_completed
              });

              // If onboarding is completed (either in Stripe or our database)
              const chargesEnabled = statusData.accountStatus?.charges_enabled;
              const onboardingCompleted = userData.stripe_onboarding_completed; // Use backend data
              const shouldNavigate = chargesEnabled || onboardingCompleted;

              console.log('üéØ Onboarding decision:', {
                chargesEnabled,
                onboardingCompleted,
                shouldNavigate
              });

            if (shouldNavigate) {
              console.log('‚úÖ Onboarding already completed, navigating to SuccessPage');

              // Update completion state for visual feedback
              setIdentityVerificationCompleted(true);
              setBankAccountLinked(true);

              try {
              // Update Supabase to ensure consistency
                const supabaseResult = await SupabaseUserService.updateStripeAccount(
                user.id,
                accountId,
                true // Mark as completed
              );
                console.log('‚úÖ Supabase update result:', supabaseResult);

                // Update user context to reflect completion
                if (supabaseResult && user) {
                  const updatedUser: UserData = {
                    ...user,
                    stripeAccountId: accountId,
                    stripeOnboardingCompleted: true
                  };
                  await setUser(updatedUser);
                  console.log('‚úÖ User context updated with completion status');
                }
              } catch (supabaseError) {
                console.error('‚ùå Supabase update failed:', supabaseError);
                // Continue with navigation even if Supabase update fails
              }

              // Navigate to success page
              console.log('üöÄ Navigating to SuccessPage...');
              navigation.replace('SuccessPage');
              return;
            }
            }
          }
        }

        console.log('‚ÑπÔ∏è No completed onboarding found, user can start fresh');
      } catch (error) {
        console.error('‚ùå Error checking onboarding status:', error);
        // Don't block the user if the check fails - they can still start onboarding
      }
    };

    checkOnboardingStatus();
  }, [user, navigation]);

  const captureStripeAccountData = async (accountId?: string, retryCount = 0, maxRetries = 5) => {
    if (!user) {
      console.error('No user data available for capturing Stripe account');
      return;
    }

    try {
      console.log(`üîç Capturing Stripe account data for user: ${user.id} (attempt ${retryCount + 1}/${maxRetries + 1})`);

      let stripeAccountId = accountId;

      // If no accountId provided, try to get it from user profile
      if (!stripeAccountId) {
        console.log('üîÑ No accountId provided, checking user profile...');

        // Get user profile data
        const userProfile = await stripeOnboardingManager.getUserProfile(user.id);

        if (userProfile?.stripeAccountId) {
          stripeAccountId = userProfile.stripeAccountId;
          console.log('‚úÖ Found account ID in user profile:', stripeAccountId);
        } else {
          console.log('üîÑ No account ID in user profile, checking legacy backend...');

          // Fallback to deployed backend API
          const userAccountResponse = await fetch(
            `https://handypay-backend.onrender.com/api/stripe/user-account/${user.id}`
          );

          if (!userAccountResponse.ok) {
            if (userAccountResponse.status === 404) {
              throw new Error('404: No Stripe account found for user');
            }
            throw new Error(`Failed to get user account: ${userAccountResponse.status}`);
          }

          const userAccountData = await userAccountResponse.json();
          stripeAccountId = userAccountData.stripe_account_id || userAccountData.stripeAccountId;

          if (!stripeAccountId) {
            throw new Error('No Stripe account ID found for user');
          }
        }
      }

      console.log('‚úÖ Using Stripe account ID:', stripeAccountId);

      // Step 2: Get account status using the existing deployed API
      const statusResponse = await fetch(
        `https://handypay-backend.onrender.com/api/stripe/account-status`,
        {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ stripeAccountId: stripeAccountId }),
        }
      );

      if (!statusResponse.ok) {
        if (statusResponse.status === 404) {
          throw new Error('404: Stripe account not found');
        }
        throw new Error(`Failed to get account status: ${statusResponse.status}`);
      }

      const accountData = await statusResponse.json();
      console.log('‚úÖ Account status retrieved:', accountData);

      // Step 3: Check onboarding status and update accordingly
      const detailsSubmitted = accountData.accountStatus?.details_submitted;
      const chargesEnabled = accountData.accountStatus?.charges_enabled;

      console.log('üìù Stripe Account Status:', {
          userId: user.id,
          stripeAccountId,
        details_submitted: detailsSubmitted,
        charges_enabled: chargesEnabled,
        payouts_enabled: accountData.accountStatus?.payouts_enabled
        });

        // Step 4: Store in backend database
        try {
          const backendResponse = await fetch(
            'https://handypay-backend.onrender.com/api/stripe/complete-onboarding',
            {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
              },
              body: JSON.stringify({
                userId: user.id,
                stripeAccountId: stripeAccountId,
              }),
            }
          );

          if (backendResponse.ok) {
            console.log('‚úÖ Onboarding completion stored in backend database');
          } else {
            console.log('‚ö†Ô∏è Failed to store completion in backend');
          }
        } catch (error) {
          console.error('Error updating backend:', error);
        }

      // Step 4: Update Supabase with onboarding completion status
      // Mark as completed if charges are enabled (account can accept payments)
        if (stripeAccountId) {
        // Mark as completed if charges are enabled (account is actually functional)
        // This is more reliable than details_submitted which might be false for pre-verified accounts
        const onboardingCompleted = chargesEnabled; // Account can accept payments when charges_enabled is true

        console.log(`üîÑ Updating Supabase - onboarding completed: ${onboardingCompleted}`);
        console.log(`üìä Account Status Details:`, {
          detailsSubmitted,
          chargesEnabled,
          onboardingCompleted,
          reason: chargesEnabled ? 'charges_enabled is true' : 'charges_enabled is false'
        });

        try {
          const supabaseUpdated = await SupabaseUserService.updateStripeAccount(
            user.id,
            stripeAccountId,
            onboardingCompleted
          );

          if (supabaseUpdated) {
            console.log('‚úÖ Stripe account data stored in Supabase successfully');
          } else {
            console.error('‚ùå Supabase updateStripeAccount returned false - possible database error');
            console.error('‚ùå Supabase update failed for user:', user.id, 'account:', stripeAccountId);
            // Log additional context for debugging
            console.error('‚ùå Account status context:', {
              detailsSubmitted,
              chargesEnabled,
              stripeAccountId,
              onboardingCompleted,
              accountData
            });
          }
        } catch (supabaseError) {
          console.error('‚ùå Exception during Supabase update:', supabaseError);
          console.error('‚ùå Supabase update failed with exception for user:', user.id);

          // Don't fail the entire flow if Supabase update fails
          // The backend update above should still work
        }
      } else {
        console.warn('‚ö†Ô∏è No stripeAccountId available for Supabase update');
      }

      // Step 5: Show appropriate success message and navigate
      console.log(`üéØ Determining success message - detailsSubmitted: ${detailsSubmitted}, chargesEnabled: ${chargesEnabled}`);

      if (chargesEnabled) {
        console.log('üéâ Onboarding completed according to API - showing success message!');
        setTimeout(() => {
          Toast.show({
            type: 'success',
            text1: 'Onboarding completed!',
            text2: 'Your account is ready to accept payments.',
          });
          setTimeout(() => navigation.replace('SuccessPage'), 1500);
        }, 300);
      } else if (detailsSubmitted) {
        console.log('üìã Details submitted but account not yet enabled - showing review message');
        setTimeout(() => {
          Toast.show({
            type: 'success',
            text1: 'Details submitted!',
            text2: 'Stripe is reviewing your account.',
          });
          setTimeout(() => navigation.replace('SuccessPage'), 1500);
        }, 300);
      } else {
        console.log('‚ö†Ô∏è Account exists but no progress made - showing setup message');
        setTimeout(() => {
          Toast.show({
            type: 'info',
            text1: 'Account Connected',
            text2: 'Complete your Stripe setup to start accepting payments.',
          });
          setTimeout(() => navigation.replace('SuccessPage'), 1500);
        }, 300);
      }

    } catch (error) {
      console.error(`‚ùå Error capturing Stripe account data (attempt ${retryCount + 1}):`, error);

      // Check if this is a 404 error (account not found) and we haven't exceeded max retries
      const is404Error = error instanceof Error && error.message.includes('404');
      const shouldRetry = is404Error && retryCount < maxRetries;

      if (shouldRetry) {
        const delayMs = Math.min(1000 * Math.pow(2, retryCount), 10000); // Exponential backoff, max 10 seconds
        console.log(`‚è≥ Account not found, retrying in ${delayMs}ms...`);

        setTimeout(() => {
          captureStripeAccountData(accountId, retryCount + 1, maxRetries);
        }, delayMs);
        return;
      }

      // Max retries reached or different error - show fallback
      console.log('‚ùå Max retries reached or different error, showing fallback');

      setTimeout(() => {
        Toast.show({
          type: 'success',
          text1: 'Onboarding completed!',
          text2: 'Account data will be synced when you restart the app.',
        });
        setTimeout(() => navigation.replace('SuccessPage'), 1500);
      }, 300);
    }
  };

  const handleStripeOnboarding = async () => {
    if (!user) {
      Alert.alert('Error', 'Please sign in first');
      return;
    }

    setLoading(true);

    // Wait 1 second before showing the alert
    await new Promise(resolve => setTimeout(resolve, 1000));

    // Check if we have a preloaded URL
    const preloadedUrl = stripeOnboardingManager.getPreloadedUrl();

    if (preloadedUrl && stripeOnboardingManager.isReady()) {
      console.log('üéâ Using preloaded Stripe onboarding URL');
      setCurrentStripeAccountId(null); // We'll get this from the backend when needed

      // Show alert to confirm before opening Stripe
      Alert.alert(
        'Continue to Stripe',
        'You\'ll be redirected to Stripe to complete your merchant account setup. This will open in your browser.',
        [
          {
            text: 'Cancel',
            style: 'cancel',
            onPress: () => {
              console.log('User cancelled Stripe redirect');
              setLoading(false);
            }
          },
          {
            text: 'Continue',
            style: 'default',
            onPress: async () => {
              try {
                // Open the preloaded Stripe onboarding URL in the device's browser
                const supported = await Linking.canOpenURL(preloadedUrl);
                if (supported) {
                  await Linking.openURL(preloadedUrl);
                } else {
                  Alert.alert('Error', 'Unable to open Stripe onboarding link');
                }
              } catch (error) {
                console.error('Error opening Stripe URL:', error);
                Alert.alert('Error', 'Unable to open Stripe onboarding link');
              } finally {
                setLoading(false);
              }
            }
          }
        ]
      );
      return;
    }

    // Fallback: Create new onboarding link if preload failed
    try {
      // First check if user has already completed onboarding (fast check)
      const userAccountResponse = await Promise.race([
        fetch(`https://handypay-backend.onrender.com/api/stripe/user-account/${user.id}`),
        new Promise<Response>((_, reject) => setTimeout(() => reject(new Error('Timeout')), 3000))
      ]);

      if (userAccountResponse.ok) {
        const userData = await userAccountResponse.json();
        if (userData.stripe_account_id || userData.stripeAccountId) {
          const accountId = userData.stripe_account_id || userData.stripeAccountId;
          const statusResponse = await Promise.race([
            fetch(`https://handypay-backend.onrender.com/api/stripe/account-status`, {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
              },
              body: JSON.stringify({ stripeAccountId: accountId }),
            }),
            new Promise<Response>((_, reject) => setTimeout(() => reject(new Error('Timeout')), 3000))
          ]);

          if (statusResponse.ok) {
            const statusData = await statusResponse.json();

            // Check if onboarding is completed (same logic as main check)
            const chargesEnabled = statusData.accountStatus?.charges_enabled;
            const onboardingCompleted = userData.stripe_onboarding_completed;
            const shouldNavigate = chargesEnabled || onboardingCompleted;

            console.log('üéØ Fallback onboarding decision:', {
              chargesEnabled,
              onboardingCompleted,
              shouldNavigate,
              detailsSubmitted: statusData.accountStatus?.details_submitted
            });

            if (shouldNavigate) {
              console.log('‚úÖ Onboarding completed (fallback check), navigating to SuccessPage');
              setLoading(false);
              navigation.replace('SuccessPage');
              return;
            }
          }
        }
      }
    } catch (error) {
      console.error('Error checking onboarding status:', error);
      // Continue with onboarding if check fails or times out
    }

    try {
      // Prepare the request data - use better defaults from fullName if available
      const firstName = user.firstName || (user.fullName ? user.fullName.split(' ')[0] : 'User');
      const lastName = user.lastName || (user.fullName ? user.fullName.split(' ').slice(1).join(' ') : 'Unknown');

      const requestData = {
        userId: user.id,
        firstName: firstName,
        lastName: lastName,
        email: user.email || 'user@handypay.com',
        refresh_url: 'https://handypay-backend.onrender.com/stripe/refresh',
        return_url: 'https://handypay-backend.onrender.com/stripe/return',
      };

      console.log('Starting Stripe onboarding for user:', requestData);

      // Call your backend API to create Stripe account and onboarding link
      const response = await fetch('https://handypay-backend.onrender.com/api/stripe/create-account-link', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(requestData),
      });

      const data = await response.json();

      if (!response.ok) {
        throw new Error(data.error || 'Failed to create Stripe account link');
      }

      console.log('Stripe onboarding URL created:', data.url);
      console.log('üìù Received Stripe account ID from backend:', data.accountId);

      // Store the account ID for later use in data capture
      const stripeAccountId = data.accountId;
      setCurrentStripeAccountId(stripeAccountId);

      // Show alert to confirm before opening Stripe
      Alert.alert(
        'Continue to Stripe',
        'You\'ll be redirected to Stripe to complete your merchant account setup. This will open in your browser.',
        [
          {
            text: 'Cancel',
            style: 'cancel',
            onPress: () => {
              console.log('User cancelled Stripe redirect');
              setLoading(false);
            }
          },
          {
            text: 'Continue',
            style: 'default',
            onPress: async () => {
              try {
                // Set onboarding in progress state
                setIsOnboardingInProgress(true);

                // Start both regular and persistent polling for status updates
                startOnboardingStatusCheck();
                startPersistentPolling();

                // Open the Stripe onboarding URL in the device's browser
                const supported = await Linking.canOpenURL(data.url);
                if (supported) {
                  await Linking.openURL(data.url);
                } else {
                  Alert.alert('Error', 'Unable to open Stripe onboarding link');
                }
              } catch (error) {
                console.error('Error opening Stripe URL:', error);
                Alert.alert('Error', 'Unable to open Stripe onboarding link');
                // Reset onboarding state on error
                setIsOnboardingInProgress(false);
                stopOnboardingStatusCheck();
              } finally {
                setLoading(false);
              }
            }
          }
        ]
      );
    } catch (error) {
      console.error('Stripe onboarding error:', error);
      Alert.alert(
        'Onboarding Error',
        error instanceof Error ? error.message : 'Failed to start Stripe onboarding. Please try again.',
        [{ text: 'OK' }]
      );
      setLoading(false);
    }
  };

  return (
    <View style={[styles.container, { paddingTop: insets.top + 8, paddingHorizontal: 24 }]}>
      <Button variant="ghost" size="icon" onPress={() => navigation.goBack()} hitSlop={{ top: 15, bottom: 15, left: 15, right: 15 }}>
        <ArrowSvg width={24} height={24} />
        {''}
      </Button>

      <View style={{ marginTop: 16 }}>
        <Text style={styles.title}>Get started</Text>
        <Text style={styles.subtitle}>You're a few taps away from accepting payments.</Text>
      </View>

      <TouchableOpacity
        style={[
          styles.card,
          loading && styles.disabledCard
        ]}
        onPress={handleStripeOnboarding}
        disabled={loading}
        activeOpacity={0.8}
      >
        <Row
          label="Complete Identify verification"
          icon={<UserScanSvg width={24} height={24} />}
          completed={identityVerificationCompleted}
        />
        <View style={styles.separator} />
        <Row
          label="Link bank account"
          icon={<BankSvg width={24} height={24} />}
          completed={bankAccountLinked}
        />

      </TouchableOpacity>

      <View style={styles.badge}>
        <Text style={{ color: '#111827', fontSize: 12, fontWeight: '400', fontFamily: 'DMSans_18pt-Regular' }}>Identify verification securely processed by </Text>
        <View ><StripeSvg width={44} height={24} /></View>
      </View>

      <View style={styles.bottomButtons}>
        <Button
          style={[styles.primaryBtn, loading && styles.disabledButton]}
          onPress={isOnboardingInProgress ? cancelOnboarding : handleStripeOnboarding}
          disabled={loading}
        >
          {loading ? (
            <View style={styles.loadingContainer}>
              <ActivityIndicator size="small" color="#ffffff" />
              <Text style={[styles.primaryBtnText, { marginLeft: 8 }]}>
                {currentStripeAccountId ? "Verifying your account..." : "Starting onboarding..."}
              </Text>
            </View>
          ) : isOnboardingInProgress ? (
            <Text style={styles.primaryBtnText}>
              Cancel Onboarding
            </Text>
          ) : (
            <Text style={styles.primaryBtnText}>
              {isReturningFromStripe ? 'Continue' : 'Get started'}
            </Text>
          )}
        </Button>
        <Button
          variant="secondary"
          style={[styles.secondaryBtn, loading && styles.disabledButton]}
          onPress={() => navigation.replace('HomeTabs')}
          disabled={loading}
        >
          Skip for now
        </Button>
        {/* Manual status check button - HIDDEN for production */}
        {false && user && !loading && !isOnboardingInProgress && (
          <TouchableOpacity
            onPress={async () => {
              if (!user) return;

              console.log('üîç Manual status check triggered');

              try {
                // Check backend status first
                const backendResponse = await fetch(`https://handypay-backend.onrender.com/api/stripe/user-account/${user.id}`);
                if (backendResponse.ok) {
                  const backendData = await backendResponse.json();

                  if (backendData.stripe_account_id) {
                    const accountId = backendData.stripe_account_id;

                    // Check Stripe account status
                    const statusResponse = await fetch(
                      `https://handypay-backend.onrender.com/api/stripe/account-status`,
                      {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ stripeAccountId: accountId }),
                      }
                    );

                    if (statusResponse.ok) {
                      const statusData = await statusResponse.json();

                      if (statusData.accountStatus?.charges_enabled) {
                        console.log('üéØ Manual check: Account is enabled! Completing onboarding...');

                        // Update Supabase
                        const supabaseResult = await SupabaseUserService.updateStripeAccount(
                          user.id,
                          accountId,
                          true
                        );

                        if (supabaseResult) {
                          // Update user context
                          const updatedUser: UserData = {
                            ...user,
                            stripeAccountId: accountId,
                            stripeOnboardingCompleted: true
                          };
                          await setUser(updatedUser);

                          console.log('‚úÖ Manual completion successful!');
                          Toast.show({
                            type: 'success',
                            text1: 'Setup completed!',
                            text2: 'Welcome to HandyPay!',
                          });

                          // Navigate to success
                          setTimeout(() => navigation.replace('SuccessPage'), 1000);
                          return;
                        }
                      }
                    }
                  }
                }

                // If manual check didn't work, run regular status check
                checkOnboardingStatus();

              } catch (error) {
                console.error('‚ùå Manual check failed:', error);
                Toast.show({
                  type: 'error',
                  text1: 'Check failed',
                  text2: 'Please try again or contact support',
                });
              }
            }}
            style={{ marginTop: 10, padding: 10, backgroundColor: '#f3f4f6', borderRadius: 8 }}
          >
            <Text style={{ textAlign: 'center', color: '#6b7280', fontSize: 14 }}>
              Check Status
            </Text>
          </TouchableOpacity>
        )}

        {/* Show Continue button if user completed onboarding but backend hasn't updated - HIDDEN for cleaner UI */}
        {false && user && !loading && !isOnboardingInProgress && (
          <Button
            variant="outline"
            style={[styles.secondaryBtn, { marginTop: 10, borderColor: '#3AB75C', borderWidth: 1 }]}
            onPress={async () => {
              // Check if user has completed Stripe onboarding but backend hasn't updated
              try {
                const backendResponse = await fetch(`https://handypay-backend.onrender.com/api/stripe/user-account/${user?.id}`);
                let backendData: any = null;
                if (backendResponse.ok) {
                  backendData = await backendResponse.json();

                  // If backend shows onboarding not completed, try to complete it
                  if (!backendData.stripe_onboarding_completed) {
                    // Check if Stripe account exists and is enabled
                    if (backendData.stripe_account_id) {
                      const accountResponse = await fetch(
                        `https://handypay-backend.onrender.com/api/stripe/account-status`,
                        {
                          method: 'POST',
                          headers: { 'Content-Type': 'application/json' },
                          body: JSON.stringify({ stripeAccountId: backendData.stripe_account_id }),
                        }
                      );

                      if (accountResponse.ok) {
                        const accountData = await accountResponse.json();
                        if (accountData.accountStatus?.charges_enabled) {
                          // User has completed onboarding in Stripe but backend hasn't updated
                          console.log('üéØ User completed onboarding, triggering completion...');
                          await testWebhookUpdate();
                          return;
                        }
                      }
                    }
                  }
                }

                // If onboarding is already complete, just navigate
                if (backendData?.stripe_onboarding_completed) {
                  navigation.replace('SuccessPage');
                  return;
                }

                // Otherwise, show message that setup is still in progress
                Toast.show({
                  type: 'info',
                  text1: 'Setup In Progress',
                  text2: 'Please complete your Stripe onboarding first',
                });

              } catch (error) {
                console.error('Error checking setup status:', error);
                Toast.show({
                  type: 'error',
                  text1: 'Connection Error',
                  text2: 'Please check your internet connection',
                });
              }
            }}
          >
            <Text style={[styles.primaryBtnText, { color: '#3AB75C' }]}>
              Continue
            </Text>
          </Button>
        )}
      </View>
    </View>
  );
}

function Row({ label, icon, completed = false }: { label: string; icon: React.ReactElement; completed?: boolean }): React.ReactElement {
  return (
    <View style={styles.row}>
      <View style={styles.rowIconCircle}>
        {icon}
      </View>
      <Text style={styles.rowLabel}>{label}</Text>
      {completed ? (
        <Ionicons name="checkmark-circle" size={22} color="#3AB75C" />
      ) : (
      <Ionicons name="chevron-forward" size={22} color="#9ca3af" />
      )}
    </View>
  );
}

const styles = StyleSheet.create({
  container: { flex: 1, backgroundColor: '#ffffff' },
  title: { fontSize: 40, fontWeight: '800', color: '#111827', lineHeight: 44, fontFamily: 'Coolvetica' },
  subtitle: { marginTop: 12, color: '#374151', fontSize: 18, lineHeight: 26, fontFamily: 'DMSans-Medium' },
  card: {
    marginTop: 16,
    borderRadius: 20,
    borderWidth: 1,
    borderColor: '#e5e7eb',
    overflow: 'hidden',
    shadowColor: '#000',
    shadowOffset: {
      width: 0,
      height: 2,
    },
    shadowOpacity: 0.1,
    shadowRadius: 3.84,
    elevation: 5,
    backgroundColor: '#ffffff',
  },

  disabledCard: {
    opacity: 0.6,
  },

  row: {
    padding: 12,
    fontSize: 16,
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
  },
  rowIconCircle: {
    width: 48,
    height: 48,
    borderRadius: 24,
    backgroundColor: '#f8fafc',
    borderWidth: 1,
    borderColor: '#e2e8f0',
    alignItems: 'center',
    justifyContent: 'center',
    marginRight: 12,
    shadowRadius: 2,
    elevation: 2,
  },
  rowLabel: { flex: 1, marginLeft: 0, fontSize: 16, fontWeight: '500', color: '#111827', fontFamily: 'DMSans-Medium' },
  separator: { height: 1, backgroundColor: '#e5e7eb' },
  badge: {
    marginTop: 16,
    padding: 14,
    backgroundColor: '#f5f5f5',
    borderRadius: 12,
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
  },
  stripePill: { backgroundColor: '#eef2ff', paddingHorizontal: 10, paddingVertical: 4, borderRadius: 8 },
  bottomButtons: { position: 'absolute', left: 24, right: 24, bottom: 56 },
  primaryBtn: { height: 48, borderRadius: 24, backgroundColor: '#3AB75C', borderColor: '#3AB75C' },
  primaryBtnText: { color: '#ffffff', fontSize: 18, fontWeight: '600', fontFamily: 'DMSans-Medium' },
  secondaryBtn: { height: 48, borderRadius: 24, backgroundColor: '#f3f4f6',  marginTop: 12 },
  secondaryBtnText: { color: '#111827', fontSize: 18, fontWeight: '600', fontFamily: 'DMSans-Medium' },
  disabledButton: { opacity: 0.6 },
  loadingContainer: { 
    flexDirection: 'row', 
    alignItems: 'center', 
    justifyContent: 'center' 
  },
});


